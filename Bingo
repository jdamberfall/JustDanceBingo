<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bingo Card Template</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Apply 'Inter' font and a dark background to the body */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Deep charcoal background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh; /* Full viewport height */
            margin: 0;
            padding: 1rem; /* Some padding around the card */
            box-sizing: border-box; /* Include padding in element's total width and height */
        }

        /* Main container for the bingo card, handles responsiveness and aspect ratio */
        .bingo-card-container {
            position: relative;
            width: 100%;
            max-width: 768px; /* Max width based on the original image width */
            /* Maintain the aspect ratio of the 768x1024 image (height / width * 100%) */
            padding-bottom: calc(1024 / 768 * 100%);
            border-radius: 1rem; /* Rounded corners for the entire card */
            overflow: hidden; /* Ensures background and content respect rounded corners */
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5); /* Large, subtle shadow */
        }

        /* The actual bingo image, positioned to cover the container */
        .bingo-card-container img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover; /* Ensures the image covers the container while maintaining aspect ratio */
            border-radius: 1rem; /* Apply rounded corners to the image */
        }

        /* Overlay for the bingo grid, precisely positioned over the squares on the image */
        .bingo-grid-overlay {
            position: absolute;
            /* These values are estimated from the provided 'bingo 26.jpg' to align the grid */
            top: 19.5%; /* Approximate top offset from image analysis */
            left: 9.1%; /* Approximate left offset */
            width: 82%; /* Approximate width of the grid area */
            height: 60.5%; /* Approximate height of the grid area */
            
            display: grid;
            grid-template-columns: repeat(5, 1fr); /* 5 equal columns */
            grid-template-rows: repeat(5, 1fr); /* 5 equal rows */
            gap: 1.6%; /* Gap between squares, adjusted to match image spacing */
        }

        /* Styling for each individual bingo square container */
        .bingo-square {
            display: flex;
            justify-content: center; /* Center content horizontally */
            align-items: center; /* Center content vertically */
            border-radius: 0.5rem; /* Rounded corners for individual squares */
            overflow: hidden; /* Ensures content within square respects rounded corners */
            /* For debugging grid placement: background-color: rgba(255, 0, 0, 0.2); */
        }

        /* Styling for the editable content inside each square */
        .bingo-editable-content {
            width: 95%; /* Take up most of the square's width */
            min-height: 95%; /* Take up most of the square's height */
            /* Removed background-color and border to make it fully transparent */
            background-color: transparent; /* Ensure full transparency */
            border: none; /* Remove any border */
            color: white; /* White text color */
            text-align: center; /* Center-align the text horizontally */
            outline: none; /* Remove default focus outline */
            padding: 0.25rem; /* Small internal padding */
            /* Responsive font size: scales from 0.6rem to 1.4rem, with 2.5vw as preferred */
            font-size: clamp(0.6rem, 2.5vw, 1.4rem);
            line-height: 1.2; /* Adjust line height for readability */
            word-break: break-word; /* Prevents long words from overflowing */
            display: flex; /* Use flexbox for perfect vertical and horizontal centering of text */
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem; /* Slightly rounded corners for the editable box itself */
        }

        /* Specific styling for the 'FREE SPACE' square */
        .free-space-text {
            font-weight: bold;
            /* Blue-purple glow effect for the text */
            text-shadow: 0 0 5px rgba(100, 100, 255, 0.7), 0 0 10px rgba(150, 150, 255, 0.5);
            /* Keep original background and border for free space, or adjust as needed */
            background-color: rgba(255, 255, 255, 0.05); /* Slightly lighter background */
            border: 1px solid rgba(255, 255, 255, 0.1); /* Slightly lighter border */
        }
    </style>
</head>
<body>
    <div class="bingo-card-container">
        <!-- The bingo card image is embedded directly using base64 data. -->
        <!-- The `{{__uploaded_file_data_bingo_26_jpg}}` placeholder is replaced by the environment with the actual image data. -->
        <img id="bingo-background-img" src="data:image/jpeg;base64,{{__uploaded_file_data_bingo_26_jpg}}" alt="Bingo Card Template">

        <div class="bingo-grid-overlay">
            <!-- Bingo squares with editable content will be dynamically inserted here by JavaScript -->
        </div>
    </div>

    <script>
        // Define initial content for each bingo square. The 13th square (index 12) is 'FREE SPACE'.
        const bingoSquaresData = Array(25).fill('');
        bingoSquaresData[12] = 'FREE SPACE'; // Set the middle square to 'FREE SPACE'

        // Get the overlay element where bingo squares will be added
        const bingoGridOverlay = document.querySelector('.bingo-grid-overlay');

        // Loop through the data to create and append each bingo square
        bingoSquaresData.forEach((content, index) => {
            const squareDiv = document.createElement('div');
            squareDiv.classList.add('bingo-square');

            const editableDiv = document.createElement('div');
            editableDiv.classList.add('bingo-editable-content');
            editableDiv.contentEditable = true; // Makes the div content editable by the user
            editableDiv.textContent = content; // Set the initial text content for the square

            // Apply specific styling for the 'FREE SPACE' square
            if (index === 12) {
                editableDiv.classList.add('free-space-text');
            }

            squareDiv.appendChild(editableDiv); // Add the editable div to the square container
            bingoGridOverlay.appendChild(squareDiv); // Add the square container to the grid overlay
        });

        // Add an event listener to clear square content on double click
        bingoGridOverlay.addEventListener('dblclick', (event) => {
            // Find the closest editable content div that was double-clicked
            const target = event.target.closest('.bingo-editable-content');
            // Ensure it's an editable element and not the 'FREE SPACE'
            if (target && target.contentEditable === 'true' && target.textContent.trim() !== 'FREE SPACE') {
                target.textContent = ''; // Clear the content
            }
        });
    </script>
</body>
</html>
